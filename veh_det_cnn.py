from __future__ import print_function
import numpy as np
np.random.seed(1337)  # for reproducibility
from scipy.misc import imread, imresize, imsave
from keras.datasets import mnist
from keras.preprocessing import image as imageproc
from keras.optimizers import SGD
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.utils import np_utils

batch_size = 5
nb_classes = 1
nb_epoch = 10
data_augmentation = True

# input image dimensions
img_rows, img_cols = 48, 48
# number of convolutional filters to use
nb_filters = 80
# size of pooling area for max pooling
nb_pool = 2

images = imageproc.list_pictures('data')
list_images = [imageproc.img_to_array(imageproc.load_img(x)) for x in images]
X_train = np.array(list_images)
#X_train /= 255
Y_train = np.ones(X_train.shape[0])
print(Y_train)

model = Sequential()


model.add(Convolution2D(nb_filters, 7, 7,
                        border_mode='valid',
                        input_shape=(3, img_rows, img_cols)))
model.add(Activation('tanh'))

model.add(MaxPooling2D(pool_size=(nb_pool, nb_pool)))

model.add(Convolution2D(nb_filters, 4, 4))
model.add(Activation('tanh'))
model.add(MaxPooling2D(pool_size=(nb_pool, nb_pool)))

model.add(Convolution2D(nb_filters, 4, 4))
model.add(Activation('tanh'))
model.add(MaxPooling2D(pool_size=(nb_pool, nb_pool)))

model.add(Flatten())
model.add(Dense(300))
model.add(Activation('tanh'))
model.add(Dense(1))
model.add(Activation('tanh'))

sgd = SGD(lr=0.001, decay=0, momentum=0, nesterov=True)

model.compile(loss='binary_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

if not data_augmentation:
    print('Not using data augmentation.')
else:
    print('Using real-time data augmentation.')

    # this will do preprocessing and realtime data augmentation
    datagen = imageproc.ImageDataGenerator(
        featurewise_center=True,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=True,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=20,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    model.fit_generator(datagen.flow(X_train, Y_train,
                        batch_size=batch_size),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=nb_epoch)




